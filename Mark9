using System;

namespace tic_tac_toe
{
    class Program
    {
        //global variables
        static string fileName = AppDomain.CurrentDomain.BaseDirectory + "scores.txt";
        static string[,] grid = new string[3, 3];
        static Random random = new Random();
        static void Main(string[] args)
        {
            //local variables for saving scores
            int[] gameData = new int[3];
            string[] fileData = new string[3];
            //check to see if the save file exists in the program directory
            if (System.IO.File.Exists(fileName))
            {
                //if it exists, import current scores to local fileData variables
                fileData = System.IO.File.ReadAllLines(fileName);
                for (int i = 0; i < 3; i++)
                    gameData[i] = Convert.ToInt32(fileData[i]);
            }
            else
            {
                //if it doesn't exist, 
                gameData[0] = 0;
                gameData[1] = 0;
                gameData[2] = 0;
            }
            //setup local variables for wins, move counter, winner, playing and gamemode
            int xWins = 0;
            int oWins = 0;
            int ties = 0;
            int moveCount = 0;
            string winner = "";
            bool playing = true;
            int mode = 0;
            //start playing loop which will terminate at option 4
            while (playing == true)
            {
                ResetBoard(winner, moveCount, xWins, oWins, ties);
                Console.Clear();
                //Welcome player and show options
                Console.WriteLine("Welcome to tic-tac-toe. \n 1. Player vs Player \n 2. Player vs Computer (Easy) \n 3. Help Screen\n 4. Exit game.");
                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                    case "1.":
                        //Put in player vs player mode and launch game
                        mode = 0;
                        TheGame(gameData, fileData, winner, moveCount, mode, xWins, oWins, ties);
                        break;
                    case "2":
                    case "2.":
                        //Put in player vs computer mode and launch game
                        mode = 1;
                        TheGame(gameData, fileData, winner, moveCount, mode, xWins, oWins, ties);
                        break;
                    case "3":
                    case "3.":
                        //GOTO the help screen
                        Help(fileData);
                        break;
                    case "4":
                    case "4.":
                        //change the value of playing so the while loop can't continue
                        playing = false;
                        break;
                    default:
                        //if the player doesn't enter a valid option, tell them to try again
                        Console.Clear();
                        Console.WriteLine("That is an invalid option. Press Enter to continue.");
                        Console.ReadLine();
                        break;
                }
            }
            //if option 4 is chosen, save the game data to the save file and close
            //this shouldn't be needed as the game saves at the end of each game
            Save(gameData, fileData);
        }
        static void TheGame(int[] gameData, string[] fileData, string winner, int moveCount, int mode, int xWins, int oWins, int ties)
        {
            //set the first player to play
            string player = "X";
            //while both players have less than 5 wins
            while (xWins < 5 && oWins < 5)
            {
                //while no one has won
                while (winner == "")
                {
                    DrawBoard();
                    //if the current player is X, let them have their turn, then change the current player to O
                    if (player == "X")
                    {
                        PlayerMove(player);
                        player = "O";
                    }
                    //otherwise check to see if the gamemode is player verses player or computer, let them have their go then change the player to O
                    else
                    {
                        if (mode == 0)
                            PlayerMove(player);
                        else if (mode == 1)
                            ComputerMoveEasy(player);
                        player = "X";
                    }
                    //add 1 to the move count so that draws can occur and won't break the game, then check to see if anyone has one yet
                    moveCount++;
                    winner = CheckWin(moveCount);
                }
                //once winner has a value
                //check if player X has won
                if (winner == "X")
                {
                    //increase the player O's score and gameData by 1
                    //it is the opposite player because the game changes who's playing before it checks if anyone has one
                    xWins++;
                    gameData[0]++;
                }
                //if X hasn't won, check to see if O has won
                else if (winner == "O")
                {
                    //increase the player X's score and gameData by 1
                    //same situation applies
                    oWins++;
                    gameData[1]++;
                }
                //if neither player has won, see if there was a draw
                else if (winner == "T")
                {
                    //increase the gameData's draw ammount
                    ties++;
                    gameData[2]++;
                }
                winner = "";
                moveCount = 0;
                //have both players got a score less than 5?
                if (xWins < 5 && oWins < 5)
                {
                    //if yes show scores and message
                    Console.WriteLine("\nX wins = " + xWins + "\nO wins = " + oWins + "\nTies = " + ties + "\n\nPress Enter to proceed to the next battle.");
                    Console.ReadLine();
                }
                else
                    //otherwise display scores without message
                    Console.WriteLine("\nX wins = " + xWins + "\nO wins = " + oWins + "\nTies = " + ties);
                ResetBoard(winner, moveCount, xWins, oWins, ties);
            }
            //if x has reached 5 wins, show x has won
            if (xWins == 5)
                Console.WriteLine("\nO has been defeated. X is the winner\nGame Over!");
            else
                //otherwise show O wins
                Console.WriteLine("\nX has been defeated. O is the winner\nGame Over!");
            //save scores to file
            Save(gameData, fileData);
            Console.ReadLine();
        }
        static string CheckWin(int moveCount)
        {
            //each time hit, increase i by 1 until it reaches 3
            for (int i = 0; i < 3; i++)
            {
                //check for horisontal win
                if ((grid[i, 0] == grid[i, 1]) && (grid[i, 0] == grid[i, 2]))
                {
                    DrawBoard();
                    Console.WriteLine("\n" + grid[i, 0] + " wins this battle!");
                    //return grid array winner
                    return grid[i, 0];
                }
                //check for vertical win
                if ((grid[0, i] == grid[1, i]) && (grid[0, i] == grid[2, i]))
                {
                    DrawBoard();
                    Console.WriteLine("\n" + grid[0, i] + " wins this battle!");
                    //return grid array winner
                    return grid[0, i];
                }
            }
            //check for diagonal win
            if (((grid[0, 0] == grid[1, 1]) && (grid[2, 2] == grid[0, 0])) || ((grid[0, 2] == grid[1, 1]) && (grid[0, 2] == grid[2, 0])))
            {
                DrawBoard();
                Console.WriteLine("\n" + grid[1, 1] + " wins this battle!");
                //return grid array winner
                return grid[1, 1];
            }
            //check to see if all possible moved are played
            if (moveCount == 9)
            {
                DrawBoard();
                Console.WriteLine("Game is a tie");
                //return tie (no winner)
                return "T";
            }
            //otherwise return nothing so game continues
            return "";
        }
        static void ComputerMoveEasy(string player)
        {
            //create local variable to temporarily store move
            string move;
            while (true)
            {
                //generate a random number between 1 and 9 and give it to variable move
                move = Convert.ToString(random.Next(1, 10));
                for (int i = 0; i < 3; i++)
                    for (int j = 0; j < 3; j++)
                        //see if move is valid
                        if (move == grid[i, j])
                        {
                            //make move
                            grid[i, j] = player;
                            return;
                        }
            }
        }
        static void PlayerMove(string player)
        {
            //create local variable to temporarily store move
            string move = "";
            while (true)
            {
                Console.WriteLine("Choose a number:");
                //get the move
                move = Console.ReadLine();
                for (int i = 0; i < 3; i++)
                    for (int j = 0; j < 3; j++)
                        //see if move is available
                        if (move == grid[i, j])
                        {
                            //play move
                            grid[i, j] = player;
                            return;
                        }
            }
        }
        static void ResetBoard(string winner, int moveCount, int oWins, int xWins, int ties)
        {
            //reset scores
            oWins = 0;
            xWins = 0;
            ties = 0;
            moveCount = 0;
            winner = "";
            //reset values in board
            int count = 1;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                {
                    grid[i, j] = Convert.ToString(count);
                    count++;
                }
        }
        static void Save(int[] gameData, string[] fileData)
        {
            //add file scores and game scores together
            for (int i = 0; i < 3; i++)
                fileData[i] = Convert.ToString(gameData[i]);
            System.IO.File.WriteAllLines(fileName, fileData);
        }
        static void DrawBoard()
        {
            //print board onscreen
            Console.Clear();
            Console.WriteLine("Win 5 battles to win the war.\n");
            //row is i, collumn is j
            //top row
            Console.WriteLine("╔═══╦═══╦═══╗");
            //declare row with integer value 0, 
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    //middle box surroundings
                    Console.Write("║ " + grid[i, j] + " ");
                    if (j == 2) Console.WriteLine("║");
                }
                //between lines
                if (i < 2) Console.WriteLine("╠═══╬═══╬═══╣");
            }
            //bottom
            Console.WriteLine("╚═══╩═══╩═══╝");
        }
        static void Help(string[] fileData)
        {
            //help menu
            Console.Clear();
            Console.WriteLine("\nThis is a game of Tick-Tack-Toe. You're playing against an intelligent\ncomputer designed to frustrate you.\n\nThe aim of the game is to get three of your counter in a row. Simple!\nEach player takes their turn one at a time until a player wins (left) or there\nis no available moves left (right) .\n\n          ╔═══╦═══╦═══╗          ╔═══╦═══╦═══╗\n          ║ X ║   ║   ║          ║ O ║ X ║ X ║\n          ╠═══╬═══╬═══╣          ╠═══╬═══╬═══╣\n          ║   ║ X ║   ║          ║ X ║ X ║ O ║\n          ╠═══╬═══╬═══╣          ╠═══╬═══╬═══╣\n          ║   ║   ║ X ║          ║ O ║ O ║ X ║\n          ╚═══╩═══╩═══╝          ╚═══╩═══╩═══╝\n\nIf a player attemps to occupy a space on the board that is already occupied\nby an X or O counter, they will have to try a different spot.\n\n\n\n\nPress Enter to continue to the next page.\nPg 1/2");
            Console.ReadKey();
            Console.Clear();
            Console.WriteLine("The scores are saved at the end of each game. The save is stored in the\ninstallation directory as scores.txt. The file will show the wins, losses and\ndraws. You can reset the scores by deleting or modifying the file while the\ngame is closed, the scores will be reset next time you launch the game.\n\nThe save file will look something like this:\n\n------------------------------File------------------------------\n" + fileData[0] + "\n" + fileData [1] + "\n" + fileData[2] + "\n----------------------------End File----------------------------\n\nAnd can be found at: " + fileName + "\n\n\n\n\n\n\n\nPress any key to return to the main menu.\nPg 2/2");
            Console.ReadKey();
            Console.Clear();
        }
    }
}
